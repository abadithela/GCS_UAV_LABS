/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FrameApp.java
 *
 * Created on Jul 31, 2009, 3:48:25 PM
 */

package gui.app;

import data.ConnectionParameters;
import data.Waypoint;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.io.File;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import kernel.Kernel;

/**
 *
 * @author David Escobar Sanabria and Christian Dernehl
 */
public class FrameApp extends javax.swing.JFrame implements AppInterface{
    private boolean UDP=true;

    /** Creates new form FrameApp */
    private Kernel kernel=null;
    private FrameAbout frameAbout;
    private Color lastColor; // for disconnection timeout
    private long lastColorChange = 0;
    private final long changeColorEveryMs = 100;
    private boolean isRed = false;
    private boolean connectionLossDetected = false;
    /**
     *
     */
    public FrameApp() {
        initComponents();
        menuItemSerialPort.setEnabled(true);
        menuItemUDP.setEnabled(false);
        setVisible(true);
        
        kernel=new Kernel(this);
        Kernel.setInstance(kernel);
        panelApp.setParent(this);
        //int a=225;
        //double rta = (double) ( 10*((double)a )/360);
        //int a= (int) ( ( (byte)128<<8) | 0   );
        //int a= (int) ( ( (byte)128<<24) | 0<<16 | 0<<8 | 0   );
        //System.out.println("rta=== "+rta );

    }

    /**
     *
     * @return
     */
    public boolean isUDP(){
        return UDP;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        layoutStyle1 = new org.jdesktop.layout.LayoutStyle();
        panelApp = new gui.app.PanelApp();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuItemExportM = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuInput = new javax.swing.JMenu();
        menuItemUDP = new javax.swing.JMenuItem();
        menuItemSerialPort = new javax.swing.JMenuItem();
        menuItemReconnect = new javax.swing.JMenuItem();
        chkSendToServer = new javax.swing.JCheckBoxMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuItemAbout = new javax.swing.JMenuItem();

        setTitle("UAV  Ground station - UAV group, Aerospace Engineering and Mechanics,  University of Minnesota");
        setBackground(new java.awt.Color(73, 68, 103));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        panelApp.setBackground(new java.awt.Color(73, 68, 103));
        getContentPane().add(panelApp, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(51, 204, 255));

        jMenu1.setText("File");

        menuItemExportM.setText("Export to .MAT");
        menuItemExportM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExportMActionPerformed(evt);
            }
        });
        jMenu1.add(menuItemExportM);

        jMenuItemClose.setText("Close");
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemClose);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");

        menuInput.setText("Input");

        menuItemUDP.setText("UDP");
        menuItemUDP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemUDPActionPerformed(evt);
            }
        });
        menuInput.add(menuItemUDP);

        menuItemSerialPort.setText("Serial port");
        menuItemSerialPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSerialPortActionPerformed(evt);
            }
        });
        menuInput.add(menuItemSerialPort);

        jMenu2.add(menuInput);

        menuItemReconnect.setText("Reconnect");
        menuItemReconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemReconnectActionPerformed(evt);
            }
        });
        jMenu2.add(menuItemReconnect);

        chkSendToServer.setText("Forward to Server");
        chkSendToServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSendToServerActionPerformed(evt);
            }
        });
        jMenu2.add(chkSendToServer);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        menuItemAbout.setText("About");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });
        jMenu3.add(menuItemAbout);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
        // TODO add your handling code here:
        stop();
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    private void menuItemUDPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemUDPActionPerformed
        // TODO add your handling code here:
        menuItemSerialPort.setEnabled(true);
        menuItemUDP.setEnabled(false);
        UDP=true;
        reconnect();
    }//GEN-LAST:event_menuItemUDPActionPerformed
    
    private void menuItemSerialPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSerialPortActionPerformed
        // TODO add your handling code here:.
        menuItemSerialPort.setEnabled(false);
        menuItemUDP.setEnabled(true);
        UDP=false;
        reconnect();
    }//GEN-LAST:event_menuItemSerialPortActionPerformed

    private void menuItemReconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemReconnectActionPerformed
        // TODO add your handling code here:
        reconnect();
    }//GEN-LAST:event_menuItemReconnectActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        //System.out.println("Bye");
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        System.out.println("Bye");
        stop();
    }//GEN-LAST:event_formWindowClosing

    private void menuItemExportMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExportMActionPerformed
        // TODO add your handling code here:
        exportMFile();
    }//GEN-LAST:event_menuItemExportMActionPerformed

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAboutActionPerformed
        // TODO add your handling code here:
        showAbout();
    }//GEN-LAST:event_menuItemAboutActionPerformed

    private void chkSendToServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSendToServerActionPerformed
        kernel.forwardToServer(chkSendToServer.isSelected());
    }//GEN-LAST:event_chkSendToServerActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        
       new FrameApp();
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBoxMenuItem chkSendToServer;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemClose;
    private org.jdesktop.layout.LayoutStyle layoutStyle1;
    private javax.swing.JMenu menuInput;
    private javax.swing.JMenuItem menuItemAbout;
    private javax.swing.JMenuItem menuItemExportM;
    private javax.swing.JMenuItem menuItemReconnect;
    private javax.swing.JMenuItem menuItemSerialPort;
    private javax.swing.JMenuItem menuItemUDP;
    private gui.app.PanelApp panelApp;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @return
     */
    public String getUDPPort() {
        return panelApp.getUDPPort();
    }

    /**
     *
     * @return
     */
    public String getRate() {
        return panelApp.getRate();
    }

    /**
     *
     * @return
     */
    public String[] getFlowControl() {
        return panelApp.getFlowControl();
    }

    /**
     *
     * @return
     */
    public String getDataBits() {
        return panelApp.getDataBits();
    }

    /**
     *
     * @return
     */
    public String getStopBits() {
        return panelApp.getStopBits();
    }

    /**
     *
     * @return
     */
    public String getSerialPort(){
        return panelApp.getSerialPort();
    }

    /**
     *
     * @return
     */

    public String getParity() {
        return panelApp.getParity();
    }
    /**
     *
     * @param message
     */
    public void joutln(String message) {
        panelApp.joutln(message);
    }

    /**
     *
     * @param message
     * @param error
     */
    public void joutln(String message, boolean error) {
        panelApp.joutln(message,error);
    }

    private void reconnect() {
        int channel= panelApp.getChannelInterface();
        kernel.reconnect(UDP);
        
    }
    /**
     *
     * @param b
     */
    public void enableSerial(boolean b){
        menuItemSerialPort.setEnabled(b);
        menuItemUDP.setEnabled(!b);
    }


   



     /**
      *
      * @param airSpeed
      */
     public void setAirSpeed(double airSpeed) {
        
        panelApp.setAirSpeed(airSpeed);

    }


    /**
     *
     * @param altitud
     */
    public void setAltitud(double altitud) {
        panelApp.setAltitud(altitud);

    }



    /**
     *
     * @param heading
     */
    public void setHeading(double heading) {
        panelApp.setHeading(heading);
    }


    /**
     *
     * @param pitch
     * @param bank
     */
    public void setPitchAndBank(double pitch, double bank) {
       panelApp.setPitchAndBank(pitch, bank);
    }



    /**
     *
     * @param time
     */
    public void setTime(double time) {
        panelApp.setTime(time);
    }



    /**
     *
     * @param mode
     */
    public void setMode(int mode) {
        panelApp.setMode(mode);
    }

    @Override
    public void paint(Graphics g){
       super.paint(g);
       //panelApp.repaint();
       
    }

    /**
     *
     */
    public void stop(){

        System.out.println("Finished !!");
        
        kernel.quit();
        kernel=null;
        
        
        this.setVisible(false);
        
        try {
            this.finalize();
        } catch (Throwable ex) {
            Logger.getLogger(FrameApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        panelApp=null;
        System.exit(0);
    }

    /**
     *
     */
    public void updateGUI() {
        panelApp.updateGUI();
    }

    private void exportMFile() {
        JFileChooser fileChooser=new JFileChooser();
        //fileChooser.setVisible(true);
        //fileChooser.addChoosableFileFilter(new MatFilter());
        int returnVal = fileChooser.showDialog(this,"Export");   
        File file =fileChooser.getSelectedFile();
        if(file!=null){
             joutln("Saving data, please wait");
             
             kernel.genMatFile(file);
        }        
    }

    /**
     *
     */
    public void start(){
    }

    /**
     *
     * @param iAS
     * @param ias_ref
     */
    public void setAirSpeed(double iAS, double ias_ref) {
        panelApp.setAirSpeed(iAS, ias_ref);
    }

    private void showAbout() {
        frameAbout=new FrameAbout();
    }

    public void setLatitude(double latidude) {
        panelApp.setLatitude(latidude);
    }

    public void setLongitud(double longitud) {
        panelApp.setLongitud(longitud);
    }

    public void setBattery(double batteryLevel) {
        panelApp.setBattery(batteryLevel);
    }

    public void setCPULoad(double CPULoad) {
        panelApp.setCPULoad(CPULoad);
    }

    public void setAileron(double aileron) {
        panelApp.setAileron(aileron);
    }

    public void setElevetor(double elevetor) {
        panelApp.setElevetor(elevetor);
    }

    public void setThrottle(double throttle) {
        panelApp.setThrottle(throttle);
    }

    public void setRudder(double rudder) {
        panelApp.setRudder(rudder);
    }

    public void setKMLPath(File file, int period) {
        kernel.setKMLPath(file,  period);
    }

    void kmlStop() {
        kernel.kmlStop();
    }

    public void setGPS(double altitude, double longitude, double latitude, int nSatellites) {
        panelApp.setGPS(altitude, longitude, latitude, nSatellites);
       
    }

    public void setInterface(int interf) {
       kernel.setInterface(interf);
    }

    public void sendDataToTerminal(char c) {
        panelApp.sendDataToTerminal(c);
    }

    public void sendDataToPort(char data, int method) {
        kernel.sendDataToPort(data,method);
    }

    public void sendDataToPort(String data, int method) {
        kernel.sendDataToPort(data, method);
    }

    public void sendDataToTerminal(String buffer) {
         panelApp.sendDataToTerminal(buffer);
    }

    public void drawGUI() {
        panelApp.drawGUI();
        
    }

    public void setRefAltitude(double altRef) {
        panelApp.setRefAltitude(altRef);
    }

    public Vector getListOfCommands() {
         return panelApp.getListOfCommands();
    }

    public void setListOfCommands(Vector vectorCommands) {
        panelApp.setListOfCommands(vectorCommands);
    }

    public void setConnectionParameters(ConnectionParameters connectionParameters) {
       panelApp.setConnectionParameters(connectionParameters);
    }

    public void setCustomData(double[] values, double time) {
        panelApp.setCustomData(values, time);
    }

    public void setCustomParameters(double[] params) {
        panelApp.setCustomParameters(params);
    }

    public void setCustomWaypoints(Waypoint[] customWaypoints) {
        panelApp.setCustomWaypoints(customWaypoints);
    }

    public void setConnectionLost() {
        if(!connectionLossDetected){
            connectionLossDetected = true;
            Toolkit.getDefaultToolkit().beep();
        }
        long time = Calendar.getInstance().getTimeInMillis();
        if(time - lastColorChange > changeColorEveryMs){
            if(isRed){
                panelApp.setBackground(lastColor);
            } else {
                lastColor = panelApp.getBackground();                
                panelApp.setBackground(Color.red);
            }
            isRed = !isRed;
            lastColorChange = time;
        }                
    }

    public void resetConnectionLost() {
        panelApp.setBackground(lastColor);
        connectionLossDetected = false;
    }

}
