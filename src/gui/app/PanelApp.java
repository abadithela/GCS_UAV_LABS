/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelApp.java
 *
 * Created on Aug 3, 2009, 9:28:51 AM
 */

package gui.app;

import data.ConnectionParameters;
import data.Waypoint;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author David Escobar Sanabria and Christian Dernehl
 */
public class PanelApp extends javax.swing.JPanel implements AppInterface, Runnable {

    /** Creates new form PanelApp */
    private static final int TABBED_VISUALIZATION = 0;
    private static final int TABBED_SETTINGS = 1;
    private static final int TABBED_MAPS = 2;
    private int tabbedIndex=0;


    public FrameApp parent;
    public PanelApp() {
        initComponents(); 
        tabbedPane.setMnemonicAt(0,KeyEvent.VK_1);
        tabbedPane.setMnemonicAt(1,KeyEvent.VK_2);
        tabbedPane.setMnemonicAt(2,KeyEvent.VK_3);
        tabbedPane.setMnemonicAt(3,KeyEvent.VK_4);
        panelKML1.setParent(this);
        panelSettings.setParent(this);
        panelVisualization1.setParent(this);
        //setBackground(new java.awt.Color(177,172,216));
        setBackground(new java.awt.Color(0,0,0));               

        Thread t = new Thread(this);
        t.start();

    }

    /**
     *
     * @return
     */
    public boolean isUDP(){
        return true;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        panelVisualization1 = new gui.hud.PanelHUD();
        panelSettings = new gui.app.PanelSettings();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        appWW1 = new wwj.gui.AppWW();
        panelKML1 = new gui.app.PanelKML();
        panelMap1 = new des.map.PanelMap();
        panelParameters1 = new gui.app.PanelParameters();
        panelConsole = new gui.app.PanelConsole();

        setBackground(new java.awt.Color(177, 172, 216));
        setForeground(new java.awt.Color(73, 68, 103));
        setAutoscrolls(true);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        tabbedPane.setBackground(new java.awt.Color(159, 155, 183));
        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });
        tabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabbedPaneMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout panelVisualization1Layout = new javax.swing.GroupLayout(panelVisualization1);
        panelVisualization1.setLayout(panelVisualization1Layout);
        panelVisualization1Layout.setHorizontalGroup(
            panelVisualization1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1003, Short.MAX_VALUE)
        );
        panelVisualization1Layout.setVerticalGroup(
            panelVisualization1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Visualization", panelVisualization1);
        tabbedPane.addTab("Settings", panelSettings);

        jTabbedPane2.setBackground(new java.awt.Color(159, 155, 183));
        jTabbedPane2.addTab("World Wind", appWW1);
        jTabbedPane2.addTab("KML settings", panelKML1);
        jTabbedPane2.addTab("Your map", panelMap1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1003, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        tabbedPane.addTab("Map", jPanel1);
        tabbedPane.addTab("Parameters", panelParameters1);

        add(tabbedPane, java.awt.BorderLayout.CENTER);
        add(panelConsole, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        // TODO add your handling code here:
        //
        //System.out.println("tab= "+tabbedPane.getSelectedIndex() );

        //
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void tabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabbedPaneMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tabbedPaneMouseClicked

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        panelVisualization1.setFocusable(isFocusable());
    }//GEN-LAST:event_formFocusGained


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private wwj.gui.AppWW appWW1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private gui.app.PanelConsole panelConsole;
    private gui.app.PanelKML panelKML1;
    private des.map.PanelMap panelMap1;
    private gui.app.PanelParameters panelParameters1;
    private gui.app.PanelSettings panelSettings;
    private gui.hud.PanelHUD panelVisualization1;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @return
     */
    public String getUDPPort() {
       return panelSettings.getUDPPort();
    }

    /**
     *
     * @return
     */
    public String getRate() {
        return panelSettings.getRate();
    }

    /**
     *
     * @return
     */
    public String[] getFlowControl() {
        return panelSettings.getFLowControl();
    }

    /**
     *
     * @return
     */
    public String getDataBits() {
        return panelSettings.getDataBits();
    }

    /**
     *
     * @return
     */
    public String getStopBits() {
        return panelSettings.getStopBits();
    }

    /**
     *
     * @return
     */



    public String getParity() {
        return panelSettings.getParity();
    }

    /**
     *
     * @return
     */
    public String getSerialPort(){
        return panelSettings.getSerialPort();
    }

    /**
     *
     * @param message
     */
    public void joutln(String message) {
        panelConsole.joutln(message);
    }

    /**
     *
     * @param message
     * @param error
     */
    public void joutln(String message, boolean error) {
        panelConsole.joutln(message, error);
    }
    /**
     *
     * @param b
     */
    public void enableSerial(boolean b){
        
    }

    /**
     *
     * @param GPS
     */



    /**
     *
     * @param airSpeed
     */
    public void setAirSpeed(double airSpeed) {
        //panelVisualization1.setAirSpeed(airSpeed);

    }


    /**
     *
     * @param altitud
     */
    public void setAltitud(double altitud) {
        panelVisualization1.setAltitude(altitud,altitud);
        panelMap1.setAltitude(altitud);

    }



    /**
     *
     * @param heading
     */
    public void setHeading(double heading) {
        panelVisualization1.setHeading(heading);
        panelMap1.setPsi(heading);
    }


    /**
     *
     * @param pitch
     * @param bank
     */
    public void setPitchAndBank(double pitch, double bank) {
       panelVisualization1.setPitchAndBank(pitch, bank);
       panelMap1.setTheta(pitch);
       panelMap1.setPhi(bank);
    }



    /**
     *
     * @param time
     */
    public void setTime(double time) {
        panelVisualization1.setTime(time);
    }



    /**
     *
     * @param mode
     */
    public void setMode(int mode) {
        panelVisualization1.setMode(mode);
    }

    @Override
    public void paint(Graphics g){
        super.paint(g);
        //panelVisualization1.repaint();
        panelConsole.repaint();
    }

    /**
     *
     */
    public void updateGUI() {
        //panelVisualization1.repaint();
        this.repaint();
    }

    /**
     *
     * @param iAS
     * @param ias_ref
     */
    public void setAirSpeed(double iAS, double ias_ref) {
        
        panelVisualization1.setAirSpeed(iAS,ias_ref);
    }

    public void setLatitude(double latidude) {
        panelVisualization1.setLatitude(latidude);
    }

    public void setLongitud(double longitud) {
        panelVisualization1.setLongitude(longitud);
    }

    public void setBattery(double batteryLevel) {
        panelVisualization1.setBatteryLevel(batteryLevel);
    }

    public void setCPULoad(double CPULoad) {
        panelVisualization1.setCPULoad(CPULoad);
    }

    public void setAileron(double aileron) {
        panelVisualization1.setAileron(aileron);
    }

    public void setElevetor(double elevetor) {
        panelVisualization1.setElevetor(elevetor);
    }

    public void setThrottle(double throttle) {
        panelVisualization1.setThrottle(throttle);
    }

    public void setRudder(double rudder) {
        panelVisualization1.setRudder(rudder);
    }

    void setKMLPath(File file, int period) {
        parent.setKMLPath(file, period);
    }

    void setParent(FrameApp aThis) {
        parent=aThis;
    }

    void kmlStop() {
        parent.kmlStop();
    }

    public void setGPS(double altitude, double longitud, double latitude, int nSatellites) {
        appWW1.addPosition(latitude, longitud, altitude);
        panelMap1.addPosition(latitude, longitud);
        setAltitud(altitude);
        setLongitud(longitud);
        setLatitude(latitude);
        setNumberSatellites(nSatellites);
    }

    public void setInterface(int interf) {
        parent.setInterface(interf);
    }

    public void sendDataToTerminal(char c) {
        panelSettings.sendDataToTerminal(c);
    }
     public void sendDataToPort(char data, int method) {
        parent.sendDataToPort(data,method);
    }

    public void sendDataToPort(String data, int method) {
        parent.sendDataToPort(data, method);
    }

    public int getChannelInterface() {
        return panelSettings.getChannelInterface();
    }

    public void sendDataToTerminal(String buffer) {
        panelSettings.sendDataToTerminal(buffer);
    }

    public void drawGUI() {
        panelVisualization1.draw();
        repaint();
    }

    public void setRefAltitude(double altRef) {
        panelVisualization1.setRefAltitude(altRef);
    }

    public Vector getListOfCommands() {
        return panelSettings.getListOfCommands();
    }

    public void setListOfCommands(Vector vectorCommands) {
        panelSettings.setListOfCommands(vectorCommands);
    }

    public void setConnectionParameters(ConnectionParameters connectionParameters) {
        panelSettings.setConnectionParameters(connectionParameters);
    }

    private void setNumberSatellites(int nSatellites) {
        panelVisualization1.setNumberSatellites(nSatellites);
    }
    
    public void setCustomData(double[] values, double time)
    {
        panelParameters1.setValues(values, time);
    }
    
    public void setCustomParameters(double[] params) {
        panelParameters1.setParams(params);
    }
    
    public void setCustomWaypoints(Waypoint[] customWaypoints) {
        panelMap1.setWaypointReply(customWaypoints);
    }

    public void run() {
        try {
            Thread.sleep(1200);
        } catch (InterruptedException ex) {
            Logger.getLogger(PanelApp.class.getName()).log(Level.SEVERE, null, ex);
        }

        while (true) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) {
                Logger.getLogger(PanelApp.class.getName()).log(Level.SEVERE, null, ex);
            }            
           panelVisualization1.draw();
           repaint();

        }
    }

    public void setConnectionLost() {
        
    }

    public void resetConnectionLost() {
        
    }





}
