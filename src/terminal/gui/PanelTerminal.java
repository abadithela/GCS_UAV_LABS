/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelTerminal.java
 *
 * Created on May 17, 2010, 5:44:18 PM
 */
package terminal.gui;

import gui.app.PanelSettings;
import java.lang.String;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;
import javax.swing.text.BadLocationException;

/**
 *
 * @author david2010a
 */
public class PanelTerminal extends javax.swing.JPanel {

    private int maxItemsInList = 20;
    private Vector vectorStringList;
    private int countLine = 0;
    private ListModel listModel;
    PanelSettings parent;
    private int caretPosition = 0;

    /** Creates new form PanelTerminal */
    public PanelTerminal() {
        initComponents();
        textTerminal.getInputMap().setParent(null);
        vectorStringList = new Vector();
        vectorStringList.addElement("go");
        listModel = new ListModel() {

            public int getSize() {
                return vectorStringList.size();
            }

            public Object getElementAt(int i) {
                return vectorStringList.elementAt(i);
            }

            public void addListDataListener(ListDataListener ll) {
            }

            public void removeListDataListener(ListDataListener ll) {
                //vectorStringList.removeAllElements();
            }
        };
        listCommands.setModel(listModel);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonClearAll = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textTerminal = new javax.swing.JTextArea();
        buttonSend = new javax.swing.JButton();
        textSend = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listCommands = new javax.swing.JList();
        buttonClearList = new javax.swing.JButton();

        setBackground(new java.awt.Color(73, 68, 103));
        setForeground(new java.awt.Color(73, 68, 103));

        buttonClearAll.setBackground(new java.awt.Color(1, 1, 1));
        buttonClearAll.setForeground(java.awt.Color.yellow);
        buttonClearAll.setText("Clear all");
        buttonClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearAllActionPerformed(evt);
            }
        });

        textTerminal.setBackground(new java.awt.Color(1, 1, 1));
        textTerminal.setColumns(20);
        textTerminal.setForeground(java.awt.Color.yellow);
        textTerminal.setRows(5);
        textTerminal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textTerminalMouseClicked(evt);
            }
        });
        textTerminal.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                textTerminalCaretUpdate(evt);
            }
        });
        textTerminal.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                textTerminalCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        textTerminal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textTerminalKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textTerminalKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(textTerminal);

        buttonSend.setBackground(new java.awt.Color(1, 1, 1));
        buttonSend.setForeground(java.awt.Color.yellow);
        buttonSend.setText("Send");
        buttonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendActionPerformed(evt);
            }
        });

        textSend.setBackground(new java.awt.Color(1, 1, 1));
        textSend.setForeground(java.awt.Color.yellow);
        textSend.setCaretColor(java.awt.Color.yellow);
        textSend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textSendKeyPressed(evt);
            }
        });

        jLabel1.setForeground(java.awt.Color.yellow);
        jLabel1.setText("Command: ");

        listCommands.setBackground(new java.awt.Color(1, 1, 1));
        listCommands.setForeground(java.awt.Color.yellow);
        listCommands.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listCommandsMouseClicked(evt);
            }
        });
        listCommands.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listCommandsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listCommands);

        buttonClearList.setBackground(new java.awt.Color(1, 1, 1));
        buttonClearList.setForeground(java.awt.Color.yellow);
        buttonClearList.setText("Clear list");
        buttonClearList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 278, Short.MAX_VALUE)
                        .addComponent(buttonSend)
                        .addGap(18, 18, 18)
                        .addComponent(buttonClearAll))
                    .addComponent(textSend, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonClearList))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(buttonClearAll)
                    .addComponent(buttonSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonClearList))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textTerminalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTerminalKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_textTerminalKeyTyped

    private void textTerminalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textTerminalKeyPressed
        // TODO add your handling code here:
        //System.out.println("all:  "+ texerminal.getText());        
    }//GEN-LAST:event_textTerminalKeyPressed

    private void buttonClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearAllActionPerformed
        // TODO add your handling code here:
        clearAll();
    }//GEN-LAST:event_buttonClearAllActionPerformed

    private void textTerminalCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_textTerminalCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_textTerminalCaretPositionChanged

    private void textTerminalCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_textTerminalCaretUpdate
    }//GEN-LAST:event_textTerminalCaretUpdate

    private void textTerminalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textTerminalMouseClicked
        // TODO add your handling code here:
        //textTerminal.setCaretPosition(caretPosition);
    }//GEN-LAST:event_textTerminalMouseClicked

    private void buttonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendActionPerformed
        // TODO add your handling code here:
        sendString(textSend.getText() + "\n");
        textSend.setText("");
    }//GEN-LAST:event_buttonSendActionPerformed

    private void textSendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSendKeyPressed
        // TODO add your handling code here:
        int code = evt.getKeyCode();
        if (code == 10) {
            sendString(textSend.getText() + "\n");
            addStringToList(textSend.getText());
            textSend.setText("");
        }
    }//GEN-LAST:event_textSendKeyPressed

    private void listCommandsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listCommandsValueChanged
        // TODO add your handling code here:      
    }//GEN-LAST:event_listCommandsValueChanged

    private void listCommandsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listCommandsMouseClicked
        // TODO add your handling code here:
        //System.out.println(" selection: " +listCommands.getSelectedIndex() );
        setSendText((String) listCommands.getSelectedValue());

    }//GEN-LAST:event_listCommandsMouseClicked

    private void buttonClearListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearListActionPerformed
        // TODO add your handling code here:
        clearList();
    }//GEN-LAST:event_buttonClearListActionPerformed

    public void setNewChar(char c) {

        //System.out.println("int: " +(int)c);
        //System.out.println("receiving = >  int: " +(int)c);
        textTerminal.append("" + c);
        if (countLine >= 500) {
            textTerminal.append("\n");
            countLine = 0;
        } else {
            countLine++;
        }
        textTerminal.setCaretPosition(textTerminal.getText().length());
        
    }

    public void setNewString(String c) {
        textTerminal.append(c);

        if (countLine >= 500) {
            textTerminal.append("\n");
            countLine = 0;
        } else {
            countLine = countLine + c.length();
        }
        textTerminal.setCaretPosition(textTerminal.getText().length());

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClearAll;
    private javax.swing.JButton buttonClearList;
    private javax.swing.JButton buttonSend;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listCommands;
    private javax.swing.JTextField textSend;
    private javax.swing.JTextArea textTerminal;
    // End of variables declaration//GEN-END:variables

    private void sendChar(char c) {
        parent.sendData(c, 0);
    }

    public void setParent(PanelSettings aThis) {
        parent = aThis;
    }

    private void clearAll() {
        textTerminal.setText("");
    }

    private void sendString(String string) {
        parent.sendData(string, 0);
    }

    private void setStringImList(String st) {
        listCommands.setModel(listModel);
    }

    private void setSendText(String string) {
        textSend.setText(string);
    }

    private void addStringToList(String text) {

        if(vectorStringList.size() >= maxItemsInList){
            vectorStringList.removeElementAt(0);
        }
        for (int i = 0; i < vectorStringList.size(); i++) {
            if (((String) vectorStringList.elementAt(i)).compareTo(text) == 0) {
                return;
            }
        }

        vectorStringList.addElement(text);
        listCommands.setListData(vectorStringList.toArray());
    }


    public Vector getListOfCommands(){
        return vectorStringList;
    }

    public void setListOfCommands(Vector vectorCommands_) {
        vectorStringList=vectorCommands_ ;
        listCommands.setListData(vectorStringList.toArray());

    }

    private void clearList() {
        vectorStringList.removeAllElements();
        listCommands.setListData(vectorStringList.toArray());
    }


}
